// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

// import (
// 	models "consumer/internal/models"
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// )

// // MockInterfacePostgresDB is a mock of InterfacePostgresDB interface.
// type MockInterfacePostgresDB struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockInterfacePostgresDBMockRecorder
// }

// // MockInterfacePostgresDBMockRecorder is the mock recorder for MockInterfacePostgresDB.
// type MockInterfacePostgresDBMockRecorder struct {
// 	mock *MockInterfacePostgresDB
// }

// // NewMockInterfacePostgresDB creates a new mock instance.
// func NewMockInterfacePostgresDB(ctrl *gomock.Controller) *MockInterfacePostgresDB {
// 	mock := &MockInterfacePostgresDB{ctrl: ctrl}
// 	mock.recorder = &MockInterfacePostgresDBMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockInterfacePostgresDB) EXPECT() *MockInterfacePostgresDBMockRecorder {
// 	return m.recorder
// }

// // AddDelivery mocks base method.
// func (m *MockInterfacePostgresDB) AddDelivery(delivery models.Delivery) (string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddDelivery", delivery)
// 	ret0, _ := ret[0].(string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // AddDelivery indicates an expected call of AddDelivery.
// func (mr *MockInterfacePostgresDBMockRecorder) AddDelivery(delivery interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelivery", reflect.TypeOf((*MockInterfacePostgresDB)(nil).AddDelivery), delivery)
// }

// // AddItems mocks base method.
// func (m *MockInterfacePostgresDB) AddItems(items []models.Item) ([]string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddItems", items)
// 	ret0, _ := ret[0].([]string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // AddItems indicates an expected call of AddItems.
// func (mr *MockInterfacePostgresDBMockRecorder) AddItems(items interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItems", reflect.TypeOf((*MockInterfacePostgresDB)(nil).AddItems), items)
// }

// // AddOrder mocks base method.
// func (m *MockInterfacePostgresDB) AddOrder(order models.Order, items []string, delivery, payment string) error {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddOrder", order, items, delivery, payment)
// 	ret0, _ := ret[0].(error)
// 	return ret0
// }

// // AddOrder indicates an expected call of AddOrder.
// func (mr *MockInterfacePostgresDBMockRecorder) AddOrder(order, items, delivery, payment interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockInterfacePostgresDB)(nil).AddOrder), order, items, delivery, payment)
// }

// // AddOrderStruct mocks base method.
// func (m *MockInterfacePostgresDB) AddOrderStruct(order models.Order) (string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddOrderStruct", order)
// 	ret0, _ := ret[0].(string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // AddOrderStruct indicates an expected call of AddOrderStruct.
// func (mr *MockInterfacePostgresDBMockRecorder) AddOrderStruct(order interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderStruct", reflect.TypeOf((*MockInterfacePostgresDB)(nil).AddOrderStruct), order)
// }

// // AddPayment mocks base method.
// func (m *MockInterfacePostgresDB) AddPayment(payment models.Payment) (string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddPayment", payment)
// 	ret0, _ := ret[0].(string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // AddPayment indicates an expected call of AddPayment.
// func (mr *MockInterfacePostgresDBMockRecorder) AddPayment(payment interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayment", reflect.TypeOf((*MockInterfacePostgresDB)(nil).AddPayment), payment)
// }

// // GetOrder mocks base method.
// func (m *MockInterfacePostgresDB) GetOrder(order_uuid string) (models.Order, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetOrder", order_uuid)
// 	ret0, _ := ret[0].(models.Order)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetOrder indicates an expected call of GetOrder.
// func (mr *MockInterfacePostgresDBMockRecorder) GetOrder(order_uuid interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockInterfacePostgresDB)(nil).GetOrder), order_uuid)
// }
