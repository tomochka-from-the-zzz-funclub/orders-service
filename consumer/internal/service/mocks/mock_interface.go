// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	config "consumer/internal/config"
	models "consumer/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceService is a mock of InterfaceService interface.
type MockInterfaceService struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceServiceMockRecorder
}

// MockInterfaceServiceMockRecorder is the mock recorder for MockInterfaceService.
type MockInterfaceServiceMockRecorder struct {
	mock *MockInterfaceService
}

// NewMockInterfaceService creates a new mock instance.
func NewMockInterfaceService(ctrl *gomock.Controller) *MockInterfaceService {
	mock := &MockInterfaceService{ctrl: ctrl}
	mock.recorder = &MockInterfaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceService) EXPECT() *MockInterfaceServiceMockRecorder {
	return m.recorder
}

// GetOrderSrv mocks base method.
func (m *MockInterfaceService) GetOrderSrv(orderUUID string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderSrv", orderUUID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderSrv indicates an expected call of GetOrderSrv.
func (mr *MockInterfaceServiceMockRecorder) GetOrderSrv(orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderSrv", reflect.TypeOf((*MockInterfaceService)(nil).GetOrderSrv), orderUUID)
}

// Read mocks base method.
func (m *MockInterfaceService) Read(cfg config.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Read", cfg)
}

// Read indicates an expected call of Read.
func (mr *MockInterfaceServiceMockRecorder) Read(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInterfaceService)(nil).Read), cfg)
}

// SetOrder mocks base method.
func (m *MockInterfaceService) SetOrder(order models.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockInterfaceServiceMockRecorder) SetOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockInterfaceService)(nil).SetOrder), order)
}
